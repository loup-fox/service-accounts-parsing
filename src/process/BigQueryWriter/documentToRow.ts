import { ParsedDocument } from "../../types/ParsedDocument.js";

export const documentToRow = (row: ParsedDocument) => {
  const data = row.data || {};
  return {
    data: {
      address: data.address,
      arrival_address: data.arrivalAddress,
      arrival_time: data.arrivalTime,
      author: data.author,
      billing_address: data.billingAddress,
      br_brand: data.br_brand,
      brand: data.brand,
      category_breadcrumb: data.category_breadcrumb,
      category: data.category,
      console: data.console,
      credit: data.credit,
      currency: data.currency,
      delivery_address: data.deliveryAddress,
      delivery_date_max: data.deliveryDateMax,
      delivery_date_min: data.deliveryDateMin,
      delivery_fee: data.deliveryFee,
      delivery_time_max: data.deliveryTimeMax,
      delivery_time_min: data.deliveryTimeMin,
      delivery_type: data.deliveryType,
      departure_address: data.departureAddress,
      departure_time: data.departureTime,
      description: data.description,
      distance_unit: data.distanceUnit,
      distance: data.distance,
      distinct_item_quantity: data.distinctItemQuantity,
      driver: data.driver,
      fidelity_additional_points: data.fidelityAdditionalPoints,
      fidelity_program_name: data.fidelityProgramName,
      first_name: data.firstName,
      is_gift: data.isGift,
      name: data.name,
      number_of_users: data.numberOfUsers,
      option_1: data.option_1,
      option_2: data.option_2,
      option_3: data.option_3,
      option_4: data.option_4,
      option_5: data.option_5,
      option_6: data.option_6,
      order_date: data.orderDate,
      order_item_quantity: data.orderItemQuantity,
      order_quantity: data.orderQuantity,
      order_time: data.orderTime,
      original_order_number_raw: data.originalOrderNumberRaw,
      original_order_number: data.originalOrderNumber,
      other_fee1_name: data.otherFee1Name,
      other_fee1: data.otherFee1,
      other_fee2_name: data.otherFee2Name,
      other_fee2: data.otherFee2,
      other_fees: data.otherFees,
      payment_type: data.paymentType,
      price_per_unit: data.pricePerUnit,
      processing_fee: data.processingFee,
      promo: data.promo,
      publisher: data.publisher,
      reference: data.reference,
      seller: data.seller,
      state: data.state,
      tax: data.tax,
      total_fees: data.totalFees,
      total_paid: data.totalPaid,
      total_price_paid: data.totalPricePaid,
      url_img: data.urlImg,
      url_item: data.urlItem,
      voucher: data.voucher,
    },
    account_id: row.accountId,
    box_name: row.boxName,
    created_at: new Date(row.createdAt).getTime() / 1000,
    date: new Date(row.date).getTime() / 1000,
    document_id: row.documentId,
    domain: row.domain,
    from: row.from,
    id: row._id,
    index: row.index,
    order_id: row.orderId,
    parser_id_sql: row.parserIdSql,
    parser_id: row.parserId,
    parser_name: row.parserName,
    parser_version: row.parserVersion,
    parser: row.parser,
    signature: row.signature,
    type: row.type,
    uid: row.uid,
    user_id: row.userId,
  };
};
